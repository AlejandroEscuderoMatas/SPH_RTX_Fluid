#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "host_device.h"
#include "raycommon.glsl"
#include "random.glsl"

layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; }; //Camera
layout(location = 0) rayPayloadEXT hitPayload prd;                                   // Ray Payload
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

const int NBSAMPLES = 10; // We can perform multiple samples directly in the ray generation shader

void main() 
{
    vec3 hitValues = vec3(0);

    for(int smpl = 0; smpl < NBSAMPLES; smpl++)
    {
        // Initialize the random number for Anti-Aliasing
        prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.frame);
        float r1 = rnd(prd.seed);
        float r2 = rnd(prd.seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = pcRay.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter; // gl_LaunchIDEXT contains the integer coordinates of the pixel being rendered
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy); //gl_LaunchSizeEXT corresponds to the image size provided when calling vkCmdTraceRaysKHR
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);
    
        // gl_RayFlagsOpaqueEXT: A flag indicating that all geometry will be considered opaque, as we also indicated when creating the acceleration structures
        uint  rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT; // gl_RayFlagsNoneEXT : This flag will make that the any hit shader is called
        float tMin     = 0.001;
        float tMax     = 10000.0;

        // Initialize all values of the payload before tracing the ray
        prd.depth       = 0;
        prd.hitValue    = vec3(0);
        prd.attenuation = vec3(1.f, 1.f, 1.f);
        prd.done        = 1;
        prd.rayOrigin   = origin.xyz;
        prd.rayDir      = direction.xyz;

        // Initialize refraction values
        prd.isRefracted           = false;
        prd.lastParticleCollision = origin.xyz;
        prd.lastPartCollNormal    = vec3(0);
        prd.particleCollisionCount    = 0;

        // Trace Ray
        vec3 hitValue = vec3(0);
        for(;;)
        {
            traceRayEXT(topLevelAS, // acceleration structure
                    rayFlags,       // rayFlags
                    0xFF,           // cullMask
                    0,              // sbtRecordOffset
                    0,              // sbtRecordStride
                    0,              // missIndex
                    origin.xyz,     // ray origin
                    tMin,           // ray min range
                    direction.xyz,  // ray direction
                    tMax,           // ray max range
                    0               // payload (location = 0)
            );
            hitValue += prd.hitValue * prd.attenuation;

            prd.depth++;
            if(prd.done == 1 || prd.depth >= pcRay.maxDepth)
              break;

            origin.xyz    = prd.rayOrigin;
            direction.xyz = prd.rayDir;
            prd.done      = 1; // Will stop if a reflective or refractant material isn't hit
        }

        hitValues += hitValue;
    }
    prd.hitValue = hitValues / NBSAMPLES;

    // Do accumulation over time
    if(pcRay.frame > 0)
    {
        float a         = 1.0f / float(pcRay.frame + 1);
        vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, prd.hitValue, a), 1.f));
    }
    else
    {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
    }
}
